{"/home/travis/build/npmtest/node-npmtest-html2jade/test.js":"/* istanbul instrument in package npmtest_html2jade */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-html2jade/lib.npmtest_html2jade.js":"/* istanbul instrument in package npmtest_html2jade */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_html2jade = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_html2jade = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-html2jade/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-html2jade && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_html2jade */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_html2jade\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_html2jade.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_html2jade.rollup.js'] =\n            local.assetsDict['/assets.npmtest_html2jade.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_html2jade.__dirname + '/lib.npmtest_html2jade.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-html2jade/node_modules/html2jade/lib/html2jade.js":"// Generated by CoffeeScript 1.6.3\n(function() {\n  var Converter, Ent, FS, Output, Parser, Path, StreamOutput, StringOutput, Writer, applyOptions, doNotEncode, entOptions, isNode, isValidJadeClassName, isValidJadeId, nspaces, publicIdDocTypeNames, scope, systemIdDocTypeNames, useTabs, validJadeClassRegExp, validJadeIdRegExp,\n    __hasProp = {}.hasOwnProperty,\n    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\n  isNode = false;\n\n  if (typeof module !== \"undefined\" && module !== null) {\n    isNode = true;\n  }\n\n  scope = typeof exports !== \"undefined\" && exports !== null ? exports : this.Html2Jade != null ? this.Html2Jade : this.Html2Jade = {};\n\n  if (isNode) {\n    FS = require(\"fs\");\n    Path = require(\"path\");\n    Ent = require(\"he\");\n  } else {\n    Ent = he;\n    window.Html2Jade = scope;\n  }\n\n  nspaces = 2;\n\n  useTabs = false;\n\n  doNotEncode = false;\n\n  entOptions = {\n    useNamedReferences: true\n  };\n\n  validJadeIdRegExp = /^[\\w\\-]+$/;\n\n  validJadeClassRegExp = /^[\\w\\-]+$/;\n\n  Parser = (function() {\n    function Parser(options) {\n      this.options = options != null ? options : {};\n      if (isNode) {\n        this.jsdom = require('jsdom-little');\n      }\n    }\n\n    Parser.prototype.parse = function(arg, cb) {\n      var parser, window;\n      if (!arg) {\n        return cb('null file');\n      } else {\n        if (this.options.inputType === \"file\") {\n          arg = FS.readFileSync(arg, \"utf8\");\n        }\n        if (isNode) {\n          return this.jsdom.env(arg, cb);\n        } else {\n          window = {};\n          parser = new DOMParser();\n          window.document = parser.parseFromString(arg, \"text/html\");\n          return cb(null, window);\n        }\n      }\n    };\n\n    return Parser;\n\n  })();\n\n  isValidJadeId = function(id) {\n    id = id ? id.trim() : \"\";\n    return id && validJadeIdRegExp.test(id);\n  };\n\n  isValidJadeClassName = function(className) {\n    className = className ? className.trim() : \"\";\n    return className && validJadeClassRegExp.test(className);\n  };\n\n  Writer = (function() {\n    function Writer(options) {\n      var _ref, _ref1, _ref2;\n      if (options == null) {\n        options = {};\n      }\n      this.wrapLength = (_ref = options.wrapLength) != null ? _ref : 80;\n      this.scalate = (_ref1 = options.scalate) != null ? _ref1 : false;\n      this.attrSep = this.scalate || options.noattrcomma ? ' ' : ', ';\n      if (options.double) {\n        this.attrQuote = '\"';\n        this.nonAttrQuote = \"'\";\n      } else {\n        this.attrQuote = \"'\";\n        this.nonAttrQuote = '\"';\n      }\n      this.attrQuoteEscaped = \"\\\\\" + this.attrQuote;\n      this.noEmptyPipe = (_ref2 = options.noemptypipe) != null ? _ref2 : false;\n    }\n\n    Writer.prototype.tagHead = function(node) {\n      var result, validClassNames;\n      result = node.tagName !== 'DIV' ? node.tagName.toLowerCase() : '';\n      if (node.id && isValidJadeId(node.id)) {\n        result += \"#\" + node.id;\n      }\n      if (node.hasAttribute('class') && node.getAttribute('class').length > 0) {\n        validClassNames = node.getAttribute('class').split(/\\s+/).filter(function(item) {\n          return item && isValidJadeClassName(item);\n        });\n        result += '.' + validClassNames.join('.');\n      }\n      if (result.length === 0) {\n        result = 'div';\n      }\n      return result;\n    };\n\n    Writer.prototype.tagAttr = function(node, indents) {\n      var attr, attrName, attrValue, attrs, invalidClassNames, result, _i, _len;\n      if (indents == null) {\n        indents = '';\n      }\n      attrs = node.attributes;\n      if (!attrs || attrs.length === 0) {\n        return '';\n      } else {\n        result = [];\n        for (_i = 0, _len = attrs.length; _i < _len; _i++) {\n          attr = attrs[_i];\n          if (attr && attr.nodeName) {\n            attrName = attr.nodeName;\n            attrValue = attr.nodeValue;\n            if (attrName === 'id' && isValidJadeId(attrValue)) {\n\n            } else if (attrName === 'class') {\n              invalidClassNames = node.getAttribute('class').split(/\\s+/).filter(function(item) {\n                return item && !isValidJadeClassName(item);\n              });\n              if (invalidClassNames.length > 0) {\n                result.push(this.buildTagAttr(attrName, invalidClassNames.join(' ')));\n              }\n            } else {\n              attrValue = attrValue.replace(/(\\r|\\n)\\s*/g, \"\\\\$1\" + indents);\n              result.push(this.buildTagAttr(attrName, attrValue));\n            }\n          }\n        }\n        if (result.length > 0) {\n          return \"(\" + (result.join(this.attrSep)) + \")\";\n        } else {\n          return '';\n        }\n      }\n    };\n\n    Writer.prototype.buildTagAttr = function(attrName, attrValue) {\n      if (attrValue.indexOf(this.attrQuote) === -1) {\n        return attrName + \"=\" + this.attrQuote + attrValue + this.attrQuote;\n      } else if (attrValue.indexOf(this.nonAttrQuote) === -1) {\n        return attrName + \"=\" + this.nonAttrQuote + attrValue + this.nonAttrQuote;\n      } else {\n        attrValue = attrValue.replace(new RegExp(this.attrQuote, 'g'), this.attrQuoteEscaped);\n        return attrName + \"=\" + this.attrQuote + attrValue + this.attrQuote;\n      }\n    };\n\n    Writer.prototype.tagText = function(node) {\n      var data, _ref;\n      if (((_ref = node.firstChild) != null ? _ref.nodeType : void 0) !== 3) {\n        return null;\n      } else if (node.firstChild !== node.lastChild) {\n        return null;\n      } else {\n        data = node.firstChild.data;\n        if (data.length > this.wrapLength || data.match(/\\r|\\n/)) {\n          return null;\n        } else {\n          return data;\n        }\n      }\n    };\n\n    Writer.prototype.forEachChild = function(parent, cb) {\n      var child, _results;\n      if (parent) {\n        child = parent.firstChild;\n        _results = [];\n        while (child) {\n          cb(child);\n          _results.push(child = child.nextSibling);\n        }\n        return _results;\n      }\n    };\n\n    Writer.prototype.writeTextContent = function(node, output, options) {\n      var _this = this;\n      output.enter();\n      this.forEachChild(node, function(child) {\n        return _this.writeText(child, output, options);\n      });\n      return output.leave();\n    };\n\n    Writer.prototype.writeText = function(node, output, options) {\n      var data, lines,\n        _this = this;\n      if (node.nodeType === 3) {\n        data = node.data || '';\n        if (data.length > 0) {\n          lines = data.split(/\\r|\\n/);\n          return lines.forEach(function(line) {\n            return _this.writeTextLine(node, line, output, options);\n          });\n        }\n      }\n    };\n\n    Writer.prototype.writeTextLine = function(node, line, output, options) {\n      var encodeEntityRef, escapeBackslash, lines, pipe, prefix, trim, wrap, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6,\n        _this = this;\n      if (options == null) {\n        options = {};\n      }\n      pipe = (_ref = options.pipe) != null ? _ref : true;\n      trim = (_ref1 = options.trim) != null ? _ref1 : false;\n      wrap = (_ref2 = options.wrap) != null ? _ref2 : true;\n      encodeEntityRef = (_ref3 = options.encodeEntityRef) != null ? _ref3 : false;\n      escapeBackslash = (_ref4 = options.escapeBackslash) != null ? _ref4 : false;\n      if (pipe && this.noEmptyPipe && line.trim().length === 0) {\n        return;\n      }\n      prefix = pipe ? '| ' : '';\n      if ((node != null ? (_ref5 = node.previousSibling) != null ? _ref5.nodeType : void 0 : void 0) !== 1) {\n        line = line.trimLeft();\n      }\n      if ((node != null ? (_ref6 = node.nextSibling) != null ? _ref6.nodeType : void 0 : void 0) !== 1) {\n        line = line.trimRight();\n      }\n      if (line) {\n        if (encodeEntityRef) {\n          line = Ent.encode(line, entOptions);\n        }\n        if (escapeBackslash) {\n          line = line.replace(\"\\\\\", \"\\\\\\\\\");\n        }\n        if (!wrap || line.length <= this.wrapLength) {\n          return output.writeln(prefix + line);\n        } else {\n          lines = this.breakLine(line);\n          if (lines.length === 1) {\n            return output.writeln(prefix + line);\n          } else {\n            return lines.forEach(function(line) {\n              return _this.writeTextLine(node, line, output, options);\n            });\n          }\n        }\n      }\n    };\n\n    Writer.prototype.breakLine = function(line) {\n      var lines, word, words;\n      if (!line || line.length === 0) {\n        return [];\n      }\n      if (line.search(/\\s+/ === -1)) {\n        return [line];\n      }\n      lines = [];\n      words = line.split(/\\s+/);\n      line = '';\n      while (words.length) {\n        word = words.shift();\n        if (line.length + word.length > this.wrapLength) {\n          lines.push(line);\n          line = word;\n        } else if (line.length) {\n          line += ' ' + word;\n        } else {\n          line = word;\n        }\n      }\n      if (line.length) {\n        lines.push(line);\n      }\n      return lines;\n    };\n\n    return Writer;\n\n  })();\n\n  publicIdDocTypeNames = {\n    \"-//W3C//DTD XHTML 1.0 Transitional//EN\": \"transitional\",\n    \"-//W3C//DTD XHTML 1.0 Strict//EN\": \"strict\",\n    \"-//W3C//DTD XHTML 1.0 Frameset//EN\": \"frameset\",\n    \"-//W3C//DTD XHTML 1.1//EN\": \"1.1\",\n    \"-//W3C//DTD XHTML Basic 1.1//EN\": \"basic\",\n    \"-//WAPFORUM//DTD XHTML Mobile 1.2//EN\": \"mobile\"\n  };\n\n  systemIdDocTypeNames = {\n    \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\": \"transitional\",\n    \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\": \"strict\",\n    \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\": \"frameset\",\n    \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\": \"1.1\",\n    \"http://www.w3.org/TR/xhtml-basic/xhtml-basic11.dtd\": \"basic\",\n    \"http://www.openmobilealliance.org/tech/DTD/xhtml-mobile12.dtd\": \"mobile\"\n  };\n\n  Converter = (function() {\n    function Converter(options) {\n      var _ref, _ref1;\n      this.options = options != null ? options : {};\n      this.scalate = (_ref = this.options.scalate) != null ? _ref : false;\n      this.writer = (_ref1 = this.options.writer) != null ? _ref1 : new Writer(this.options);\n    }\n\n    Converter.prototype.document = function(document, output) {\n      var docTypeName, doctype, htmlEls, publicId, systemId;\n      if (document.doctype != null) {\n        doctype = document.doctype;\n        docTypeName = void 0;\n        publicId = doctype.publicId;\n        systemId = doctype.systemId;\n        if ((publicId != null) && (publicIdDocTypeNames[publicId] != null)) {\n          docTypeName = publicIdDocTypeNames[publicId];\n        } else if ((systemId != null) && (systemIdDocTypeNames[systemId] != null)) {\n          docTypeName = systemIdDocTypeNames[systemId] != null;\n        } else if ((doctype.name != null) && doctype.name.toLowerCase() === 'html') {\n          docTypeName = 'html';\n        }\n        if (docTypeName != null) {\n          output.writeln('doctype ' + docTypeName);\n        }\n      }\n      if (document.documentElement) {\n        return this.children(document, output, false);\n      } else {\n        htmlEls = document.getElementsByTagName('html');\n        if (htmlEls.length > 0) {\n          return this.element(htmlEls[0], output);\n        }\n      }\n    };\n\n    Converter.prototype.element = function(node, output) {\n      var firstline, tagAttr, tagHead, tagName, tagText,\n        _this = this;\n      if (!(node != null ? node.tagName : void 0)) {\n        return;\n      }\n      tagName = node.tagName.toLowerCase();\n      tagHead = this.writer.tagHead(node);\n      tagAttr = this.writer.tagAttr(node, output.indents);\n      tagText = this.writer.tagText(node);\n      if (tagName === 'script' || tagName === 'style') {\n        if (node.hasAttribute('src')) {\n          output.writeln(tagHead + tagAttr);\n          return this.writer.writeTextContent(node, output, {\n            pipe: false,\n            wrap: false\n          });\n        } else if (tagName === 'script') {\n          return this.script(node, output, tagHead, tagAttr);\n        } else if (tagName === 'style') {\n          return this.style(node, output, tagHead, tagAttr);\n        }\n      } else if (tagName === 'conditional') {\n        output.writeln('//' + node.getAttribute('condition'));\n        return this.children(node, output);\n      } else if (['pre'].indexOf(tagName) !== -1) {\n        output.writeln(tagHead + tagAttr + '.');\n        output.enter();\n        firstline = true;\n        this.writer.forEachChild(node, function(child) {\n          var data;\n          if (child.nodeType === 3) {\n            data = child.data;\n            if ((data != null) && data.length > 0) {\n              if (firstline) {\n                if (data.search(/\\r\\n|\\r|\\n/) === 0) {\n                  data = data.replace(/\\r\\n|\\r|\\n/, '');\n                }\n                data = '\\\\n' + data;\n                firstline = false;\n              }\n              data = data.replace(/\\t/g, '\\\\t');\n              data = data.replace(/\\r\\n|\\r|\\n/g, '\\n' + output.indents);\n              return output.write(data);\n            }\n          }\n        });\n        output.writeln();\n        return output.leave();\n      } else if (this.options.bodyless && (tagName === 'html' || tagName === 'body')) {\n        return this.children(node, output, false);\n      } else if (tagText) {\n        if (doNotEncode) {\n          return output.writeln(tagHead + tagAttr + ' ' + tagText);\n        } else {\n          return output.writeln(tagHead + tagAttr + ' ' + Ent.encode(tagText, entOptions));\n        }\n      } else {\n        output.writeln(tagHead + tagAttr);\n        return this.children(node, output);\n      }\n    };\n\n    Converter.prototype.children = function(parent, output, indent) {\n      var _this = this;\n      if (indent == null) {\n        indent = true;\n      }\n      if (indent) {\n        output.enter();\n      }\n      this.writer.forEachChild(parent, function(child) {\n        var nodeType;\n        nodeType = child.nodeType;\n        if (nodeType === 1) {\n          return _this.element(child, output);\n        } else if (nodeType === 3) {\n          if (parent._nodeName === 'code') {\n            return _this.text(child, output, {\n              encodeEntityRef: true,\n              pipe: true\n            });\n          } else {\n            return _this.text(child, output, doNotEncode ? {\n              encodeEntityRef: false\n            } : {\n              encodeEntityRef: true\n            });\n          }\n        } else if (nodeType === 8) {\n          return _this.comment(child, output);\n        }\n      });\n      if (indent) {\n        return output.leave();\n      }\n    };\n\n    Converter.prototype.text = function(node, output, options) {\n      node.normalize();\n      return this.writer.writeText(node, output, options);\n    };\n\n    Converter.prototype.comment = function(node, output) {\n      var condition, data, lines,\n        _this = this;\n      condition = node.data.match(/\\s*\\[(if\\s+[^\\]]+)\\]/);\n      if (!condition) {\n        data = node.data || '';\n        if (data.length === 0 || data.search(/\\r|\\n/) === -1) {\n          return output.writeln(\"// \" + (data.trim()));\n        } else {\n          output.writeln('//');\n          output.enter();\n          lines = data.split(/\\r|\\n/);\n          lines.forEach(function(line) {\n            return _this.writer.writeTextLine(node, line, output, {\n              pipe: false,\n              trim: true,\n              wrap: false\n            });\n          });\n          return output.leave();\n        }\n      } else {\n        return this.conditional(node, condition[1], output);\n      }\n    };\n\n    Converter.prototype.conditional = function(node, condition, output) {\n      var conditionalElem, innerHTML;\n      innerHTML = node.textContent.trim().replace(/\\s*\\[if\\s+[^\\]]+\\]>\\s*/, '').replace('<![endif]', '');\n      if (innerHTML.indexOf(\"<!\") === 0) {\n        condition = \" [\" + condition + \"] <!\";\n        innerHTML = null;\n      }\n      conditionalElem = node.ownerDocument.createElement('conditional');\n      conditionalElem.setAttribute('condition', condition);\n      if (innerHTML) {\n        conditionalElem.innerHTML = innerHTML;\n      }\n      return node.parentNode.insertBefore(conditionalElem, node.nextSibling);\n    };\n\n    Converter.prototype.script = function(node, output, tagHead, tagAttr) {\n      if (this.scalate) {\n        output.writeln(':javascript');\n        return this.writer.writeTextContent(node, output, {\n          pipe: false,\n          wrap: false\n        });\n      } else {\n        output.writeln(\"\" + tagHead + tagAttr + \".\");\n        return this.writer.writeTextContent(node, output, {\n          pipe: false,\n          trim: true,\n          wrap: false,\n          escapeBackslash: true\n        });\n      }\n    };\n\n    Converter.prototype.style = function(node, output, tagHead, tagAttr) {\n      if (this.scalate) {\n        output.writeln(':css');\n        return this.writer.writeTextContent(node, output, {\n          pipe: false,\n          wrap: false\n        });\n      } else {\n        output.writeln(\"\" + tagHead + tagAttr + \".\");\n        return this.writer.writeTextContent(node, output, {\n          pipe: false,\n          trim: true,\n          wrap: false\n        });\n      }\n    };\n\n    return Converter;\n\n  })();\n\n  Output = (function() {\n    function Output() {\n      this.indents = '';\n    }\n\n    Output.prototype.enter = function() {\n      var i, _i, _results;\n      if (useTabs) {\n        return this.indents += '\\t';\n      } else {\n        _results = [];\n        for (i = _i = 1; 1 <= nspaces ? _i <= nspaces : _i >= nspaces; i = 1 <= nspaces ? ++_i : --_i) {\n          _results.push(this.indents += ' ');\n        }\n        return _results;\n      }\n    };\n\n    Output.prototype.leave = function() {\n      if (useTabs) {\n        return this.indents = this.indents.substring(1);\n      } else {\n        return this.indents = this.indents.substring(nspaces);\n      }\n    };\n\n    Output.prototype.write = function(data, indent) {\n      if (indent == null) {\n        indent = true;\n      }\n    };\n\n    Output.prototype.writeln = function(data, indent) {\n      if (indent == null) {\n        indent = true;\n      }\n    };\n\n    return Output;\n\n  })();\n\n  StringOutput = (function(_super) {\n    __extends(StringOutput, _super);\n\n    function StringOutput() {\n      StringOutput.__super__.constructor.apply(this, arguments);\n      this.fragments = [];\n    }\n\n    StringOutput.prototype.write = function(data, indent) {\n      if (indent == null) {\n        indent = true;\n      }\n      if (data == null) {\n        data = '';\n      }\n      if (indent) {\n        return this.fragments.push(this.indents + data);\n      } else {\n        return this.fragments.push(data);\n      }\n    };\n\n    StringOutput.prototype.writeln = function(data, indent) {\n      if (indent == null) {\n        indent = true;\n      }\n      if (data == null) {\n        data = '';\n      }\n      if (indent) {\n        return this.fragments.push(this.indents + data + '\\n');\n      } else {\n        return this.fragments.push(data + '\\n');\n      }\n    };\n\n    StringOutput.prototype.final = function() {\n      var result;\n      result = this.fragments.join('');\n      this.fragments = [];\n      return result;\n    };\n\n    return StringOutput;\n\n  })(Output);\n\n  StreamOutput = (function(_super) {\n    __extends(StreamOutput, _super);\n\n    function StreamOutput(stream) {\n      this.stream = stream;\n      StreamOutput.__super__.constructor.apply(this, arguments);\n    }\n\n    StreamOutput.prototype.write = function(data, indent) {\n      if (indent == null) {\n        indent = true;\n      }\n      if (data == null) {\n        data = '';\n      }\n      if (indent) {\n        return this.stream.write(this.indents + data);\n      } else {\n        return this.stream.write(data);\n      }\n    };\n\n    StreamOutput.prototype.writeln = function(data, indent) {\n      if (indent == null) {\n        indent = true;\n      }\n      if (data == null) {\n        data = '';\n      }\n      if (indent) {\n        return this.stream.write(this.indents + data + '\\n');\n      } else {\n        return this.stream.write(data + '\\n');\n      }\n    };\n\n    return StreamOutput;\n\n  })(Output);\n\n  scope.Output = Output;\n\n  scope.StringOutput = StringOutput;\n\n  scope.Converter = Converter;\n\n  scope.Writer = Writer;\n\n  applyOptions = function(options) {\n    if (options.numeric != null) {\n      entOptions.useNamedReferences = !options.numeric;\n    }\n    if (options.nspaces != null) {\n      nspaces = parseInt(options.nspaces);\n    }\n    if (options.tabs != null) {\n      useTabs = !!options.tabs;\n    }\n    if (options.donotencode != null) {\n      return doNotEncode = !!options.donotencode;\n    }\n  };\n\n  if (typeof exports !== \"undefined\" && exports !== null) {\n    scope.Parser = Parser;\n    scope.StreamOutput = StreamOutput;\n    scope.convert = function(input, output, options) {\n      if (options == null) {\n        options = {};\n      }\n      applyOptions(options);\n      if (options.parser == null) {\n        options.parser = new Parser(options);\n      }\n      return options.parser.parse(input, function(errors, window) {\n        if (errors != null ? errors.length : void 0) {\n          return errors;\n        } else {\n          if (output == null) {\n            output = new StreamOutput(process.stdout);\n          }\n          if (options.converter == null) {\n            options.converter = new Converter(options);\n          }\n          return options.converter.document(window.document, output);\n        }\n      });\n    };\n  }\n\n  scope.convertHtml = function(html, options, cb) {\n    if (options == null) {\n      options = {};\n    }\n    applyOptions(options);\n    if (options.parser == null) {\n      options.parser = new Parser(options);\n    }\n    return options.parser.parse(html, function(errors, window) {\n      var output, _ref;\n      if (errors != null ? errors.length : void 0) {\n        return errors;\n      } else {\n        output = (_ref = options.output) != null ? _ref : new StringOutput();\n        if (options.converter == null) {\n          options.converter = new Converter(options);\n        }\n        options.converter.document(window.document, output);\n        if (cb != null) {\n          return cb(null, output.final());\n        }\n      }\n    });\n  };\n\n  scope.convertDocument = function(document, options, cb) {\n    var output, _ref;\n    if (options == null) {\n      options = {};\n    }\n    applyOptions(options);\n    output = (_ref = options.output) != null ? _ref : new StringOutput();\n    if (options.converter == null) {\n      options.converter = new Converter(options);\n    }\n    options.converter.document(document, output);\n    if (cb != null) {\n      return cb(null, output.final());\n    }\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-html2jade/node_modules/html2jade/cli.js":"#!/usr/bin/env node\n\nvar fs = require('fs');\nvar path = require('path');\nvar url = require('url');\n\nvar existsSync = fs.existsSync || path.existsSync;\n\nvar html2jade;\ntry {\n    html2jade = require('html2jade');\n} catch(err) {\n    html2jade = require('./lib/html2jade');\n}\n\nfunction parsePath(arg) {\n  if (typeof arg !== 'string') {\n    console.error('invalid input: ' + arg);\n  } else if (path.resolve('/',arg) === arg) {\n    // already absolute path\n    return arg;\n  } else if (arg.length >= 2 && arg.substring(0, 2) === '~/') {\n    // home path\n    return path.join(process.env['HOME'], arg.substring(2));\n  } else {\n    // relative to current path\n    return path.join(process.cwd(), arg);\n  }\n}\n\nfunction convert(input, output, options) {\n  if (input) {\n    try {\n      var errors = html2jade.convert(input, output, options);\n      if (errors) {\n        console.error('parser errors: ' + errors);\n      }\n    } catch (err) {\n      console.error(err);\n    }\n  } else {\n    console.error('invalid input: ' + input);\n  }\n}\n\nvar program = require('commander');\nvar version = require('./package').version;\n\nprogram\n  .version(version)\n  .option('-d, --double', 'use double quotes for attributes')\n  .option('-s, --scalate', 'generate jade syntax compatible with Scalate')\n  .option('-t, --tabs', 'use tabs instead of spaces')\n  .option('-o, --outdir <dir>', 'path to output generated jade file(s) to', parsePath)\n  .option('-n, --nspaces <n>', 'the number of spaces to indent generated files with', parseInt)\n  .option('--donotencode', 'do not html encode characters (useful for templates)')\n  .option('--bodyless', 'do not output enveloping html and body tags')\n  .option('--numeric', 'use numeric character entities')\n  .option('--noattrcomma', 'omit attribute separating commas')\n  .option('--noemptypipe', 'omit lines with only pipe (\\'|\\') printable character')\n\nprogram.parse(process.argv);\n\n// if outdir is provided, check existance (sorry no mkdir support yet)\nif (program.outdir && !existsSync(program.outdir)) {\n  console.error(\"output directory '\" + program.outdir + \"' doesn't exist\");\n  process.exit(1);\n}\n\n// process each arguments\nvar args = program.args;\nif (!args || args.length === 0) {\n  args = ['-'];\n  // console.error(\"input argument(s) missing\");\n  // process.exit(1);\n}\n\nfor (var i = 0; i < args.length; i++) {\n  var arg = args[i], inputUrl, inputPath;\n\n  // handle stdin to stdout\n  if (arg === '-') {\n    var input = '';\n    process.stdin.resume();\n    process.stdin.on('data', function (chunk){\n      input += chunk;\n    });\n    process.stdin.on('end', function (){\n      program.inputType = \"html\";\n      convert(input, undefined, program);\n    });\n    continue;\n  }\n\n  if (typeof arg === 'string' && !existsSync(arg)) {\n    try { inputUrl = url.parse(arg); } catch (err) {}\n  }\n  if (inputUrl && inputUrl.protocol) {\n    // URL input, use stdout\n    program.inputType = \"url\";\n    convert(arg, undefined, program);\n  } else {\n    // path or glob\n    inputPath = parsePath(arg);\n    if (existsSync(inputPath)) {\n      var inputStats = fs.statSync(inputPath);\n      if (inputStats.isFile()) {\n        var outdir = program.outdir || path.dirname(arg);\n        var outputPath = path.join(outdir, path.basename(inputPath, path.extname(inputPath)) + '.jade');\n        // console.log(\"converting '\" + arg + \"' to '\" + outputPath + \"'\");\n        var outputStream = fs.createWriteStream(outputPath, {\n          flags: 'w',\n          encoding: 'utf8',\n        });\n        program.inputType = \"file\";\n        convert(inputPath, new html2jade.StreamOutput(outputStream), program);\n      }\n    } else {\n      console.error(\"input file doesn't exist: \" + arg);\n    }\n  }\n}\n"}